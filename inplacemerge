class Solution {
public:
   void mergesort(vector<int>&nums,int low , int mid , int high){
       int length_ar = high - low + 1;
       int gap = length_ar /2  + length_ar % 2 ;
      
       while(gap > 0){
       int i = low;
       int j =low +  gap;
       while(j<=high){
           if(nums[i]>nums[j]){
               swap(nums[i],nums[j]);
               
           }
           i++,j++;

       }

       gap = gap <= 1 ? 0 :  (gap /2 ) + (gap % 2) ;
      

       } 
   }
   void MS(vector<int> &nums , int low , int high){
       if(low >= high){
           return;
       }
       int mid = (low + high) / 2;

       MS(nums,low,mid);
       MS(nums,mid+1,high);
       mergesort(nums,low,mid,high);
   }
    vector<int> sortArray(vector<int>& nums) {
        MS(nums,0,nums.size()-1);
        return nums;
    }
};
